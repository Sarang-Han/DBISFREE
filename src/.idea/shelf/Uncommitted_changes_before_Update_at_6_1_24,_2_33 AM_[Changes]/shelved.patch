Index: java/jdbc/database/DB2024TEAM07_RatingDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package jdbc.database;\n//Database 파일의 커넥션과의 연결 필요\n//error라고 적힌 부분은 조치 필요(고민)-롤백/무시/등\n\n/* 구현된 기능\n    가게에 대한 리뷰 등록:   add(int review_id, int res_id)\n    레스토랑 평균 평점 반환:  getAvg(int res_id)\n*/\n\nimport java.util.ArrayList;\nimport java.sql.*;\n\npublic class DB2024TEAM07_RatingDAO{\n    private Connection conn;\n    private PreparedStatement pStmt;\n    private Statement stmt;\n    private ResultSet rs;\n\n    public DB2024TEAM07_RatingDAO() {\n        this.conn = DB2024TEAM07_Database.getInstance().getConnection();\n    }\n\n    //가게에 대한 리뷰 등록 -----------------------------------------------------------------------\n    //새 리뷰 작성 시 무조건 호출되어야 함\n    //이걸 서비스 단에서 트랜잭션 구현할지 아님 DAO에서 해결볼지는 고민해봐야 할 것 같아요\n    //개인적으로는 위에서 처리하는 게 더 깔끔할 것 같다고 생각은 합니다\n    public int add(int review_id, int res_id){\n        String Q = \"INSERT INTO DB2024_Rating VALUES (?, ?)\";\n        try{\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setInt(1, review_id);\n            pStmt.setInt(2, res_id);\n            return pStmt.executeUpdate();\n        }catch(SQLException se){\n            se.printStackTrace();\n        }\n        return -2;  //error\n    }\n\n    //레스토랑 평점 반환 기능-----------------------------------------------------------------------\n    //DB2024_Review 테이블의 투플이 추가/삭제되거나, rating 속성 수정이 이뤄졌을 때 호출되어야 한다.\n    //테이블 간 변화 적용이 필요한 부분이므로 트랜잭션 필수\n    //인덱스 힌트(DB2024_idx_AvgRating)\n    public float getAvg(int res_id){\n        String Q = \"SELECT AVG(rating) FROM DB2024_Rating USE INDEX(DB2024_idx_AvgRating) WHERE res_id = ? GROUP BY res_id\";\n        try{\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setInt(1, res_id);\n            rs = pStmt.executeQuery();\n            if(rs.next()){\n                return rs.getFloat(1);\n            }\n            return -1;   //res_id is wrong\n        }catch(SQLException se){\n            se.printStackTrace();\n        }\n        return -2;  //error\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/java/jdbc/database/DB2024TEAM07_RatingDAO.java b/java/jdbc/database/DB2024TEAM07_RatingDAO.java
--- a/java/jdbc/database/DB2024TEAM07_RatingDAO.java	(revision 2f77fc7454fe2db47ab2b551df7ce6a98d0d99b7)
+++ b/java/jdbc/database/DB2024TEAM07_RatingDAO.java	(date 1717176649724)
@@ -41,8 +41,18 @@
     //DB2024_Review 테이블의 투플이 추가/삭제되거나, rating 속성 수정이 이뤄졌을 때 호출되어야 한다.
     //테이블 간 변화 적용이 필요한 부분이므로 트랜잭션 필수
     //인덱스 힌트(DB2024_idx_AvgRating)
+    //중첩 쿼리 이용됨
     public float getAvg(int res_id){
-        String Q = "SELECT AVG(rating) FROM DB2024_Rating USE INDEX(DB2024_idx_AvgRating) WHERE res_id = ? GROUP BY res_id";
+        /*
+        SELECT AVG(rating)
+        FROM DB2024_Review
+        WHERE review_id =
+            (SELECT review_id
+            FROM DB2024_Rating DB2024_Rating USE INDEX(DB2024_idx_AvgRating)
+            WHERE res_id = ?)
+        GROUP BY res_id;
+         */
+        String Q = "SELECT AVG(rating) FROM DB2024_Review WHERE review_id = (SELECT review_id FROM DB2024_Rating DB2024_Rating USE INDEX(DB2024_idx_AvgRating) WHERE res_id = ?) GROUP BY res_id";
         try{
             pStmt = conn.prepareStatement(Q);
             pStmt.setInt(1, res_id);
Index: java/jdbc/database/DB2024TEAM07_MenuDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package jdbc.database;\n\nimport jdbc.model.DB2024TEAM07_Menu;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DB2024TEAM07_MenuDAO{\n    private Connection conn;\n    private PreparedStatement pStmt;\n    private ResultSet rs;\n\n    public DB2024TEAM07_MenuDAO(){\n        this.conn = DB2024TEAM07_Database.getInstance().getConnection();\n    }\n\n    //메뉴 등록 (관리자 관점)\n    public int add(DB2024TEAM07_Menu menu) {\n        String Q = \"INSERT INTO DB2024_Menu (menu_id, menu_name, res_id, price, menu_comment) VALUES (?, ?, ?, ?, ?)\";\n        try {\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setInt(1, menu.getMenu_id());\n            pStmt.setString(2, menu.getMenu_name());\n            pStmt.setInt(3, menu.getRes_id());\n            pStmt.setInt(4, menu.getPrice());\n            pStmt.setString(5, menu.getMenu_comment());\n\n            return pStmt.executeUpdate();\n\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        return 0;\n    }\n\n    //    메뉴 조회 1 (사용자 관점)\n    //    minPrice 와 maxPrice 사이의 가격에 해당하는 메뉴들 조회\n    //    사용자 입장에서 어떤 식당에 있는 메뉴들을 검색할 땐 res_name으로 검색하지 res_id로 검색하지 않기 때문에 Menu 테이블과 Restaurant 테이블을 조인해서 res_name 받아옴.\n    //    사용자에게 필요한 정보(res_name, menu_name, price, menu_comment 만 보여주기\n    public ResultSet searchByUsers(String res_name, String menu_name, Integer minPrice, Integer maxPrice) {\n        StringBuilder Q = new StringBuilder( // DB2024_MenuView 뷰 활용.\n                \"SELECT res_name, menu_name, price, menu_comment FROM DB2024_MenuView WHERE 1=1\"\n        );\n\n        List<Object> params = new ArrayList<>();\n\n        if (res_name != null && !res_name.isEmpty()) {\n            Q.append(\" AND res_name LIKE ?\");\n            params.add(\"%\" + res_name + \"%\");\n        }\n\n        if (menu_name != null && !menu_name.isEmpty()) {\n            Q.append(\" AND menu_name LIKE ?\");\n            params.add(\"%\" + menu_name + \"%\");\n        }\n\n        if (minPrice != null) {\n            Q.append(\" AND price >= ?\");\n            params.add(minPrice);\n        }\n\n        if (maxPrice != null) {\n            Q.append(\" AND price <= ?\");\n            params.add(maxPrice);\n        }\n\n        try {\n            pStmt = conn.prepareStatement(Q.toString());\n\n            for (int i = 0; i < params.size(); i++) {\n                pStmt.setObject(i + 1, params.get(i));\n            }\n            return pStmt.executeQuery();\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        return null;\n    }\n\n    // 메뉴 조회 - 식당별로 메뉴 검색\n    public ResultSet searchMenuByRestaurant(String res_id) {\n        String Q = \"SELECT menu_id, menu_name, price FROM DB2024_Menu use index(DB2024_idx_Menu) WHERE res_id = ?\";\n        try {\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setString(1, res_id);\n            return pStmt.executeQuery();\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        return null;\n    }\n\n    // 메뉴 조회 2 (관리자 관점 - res_id로 검색해도 괜찮은 주체)\n    public ResultSet searchByManager(int res_id) {\n        String Q = \"SELECT * FROM DB2024_Menu WHERE res_id=?\";\n        try {\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setInt(1, res_id);\n\n            return pStmt.executeQuery();\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        return null;\n    }\n\n    //메뉴 수정 (관리자 관점)\n    public int update(DB2024TEAM07_Menu menu, int pRes_id, int pMenu_id) {\n        String Q = \"UPDATE DB2024_Menu SET menu_id=?, menu_name=?, res_id=?, price=?, menu_comment=? WHERE res_id=? AND menu_id=?\";\n        try {\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setInt(1, menu.getMenu_id());\n            pStmt.setString(2, menu.getMenu_name());\n            pStmt.setInt(3, menu.getRes_id());\n            pStmt.setInt(4, menu.getPrice());\n            pStmt.setString(5, menu.getMenu_comment());\n            pStmt.setInt(6, pRes_id);\n            pStmt.setInt(7, pMenu_id);\n\n            return pStmt.executeUpdate();\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        return 0;\n    }\n\n    //메뉴 삭제 (관리자 관점)\n    public int delete(int res_id, int menu_id) {\n        String Q = \"DELETE FROM DB2024_Menu WHERE res_id=? AND menu_id=?\";\n        try {\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setInt(1, res_id);\n            pStmt.setInt(2, menu_id);\n\n            return pStmt.executeUpdate();\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        return 0;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/java/jdbc/database/DB2024TEAM07_MenuDAO.java b/java/jdbc/database/DB2024TEAM07_MenuDAO.java
--- a/java/jdbc/database/DB2024TEAM07_MenuDAO.java	(revision 2f77fc7454fe2db47ab2b551df7ce6a98d0d99b7)
+++ b/java/jdbc/database/DB2024TEAM07_MenuDAO.java	(date 1717176649724)
@@ -27,7 +27,6 @@
             pStmt.setString(2, menu.getMenu_name());
             pStmt.setInt(3, menu.getRes_id());
             pStmt.setInt(4, menu.getPrice());
-            pStmt.setString(5, menu.getMenu_comment());
 
             return pStmt.executeUpdate();
 
@@ -43,7 +42,7 @@
     //    사용자에게 필요한 정보(res_name, menu_name, price, menu_comment 만 보여주기
     public ResultSet searchByUsers(String res_name, String menu_name, Integer minPrice, Integer maxPrice) {
         StringBuilder Q = new StringBuilder( // DB2024_MenuView 뷰 활용.
-                "SELECT res_name, menu_name, price, menu_comment FROM DB2024_MenuView WHERE 1=1"
+                "SELECT res_name, menu_name, price FROM DB2024_MenuView WHERE 1=1"
         );
 
         List<Object> params = new ArrayList<>();
@@ -82,11 +81,11 @@
     }
 
     // 메뉴 조회 - 식당별로 메뉴 검색
-    public ResultSet searchMenuByRestaurant(String res_id) {
+    public ResultSet searchMenuByRestaurant(String res_name) {
         String Q = "SELECT menu_id, menu_name, price FROM DB2024_Menu use index(DB2024_idx_Menu) WHERE res_id = ?";
         try {
             pStmt = conn.prepareStatement(Q);
-            pStmt.setString(1, res_id);
+            pStmt.setString(1, res_name);
             return pStmt.executeQuery();
         } catch (SQLException se) {
             se.printStackTrace();
@@ -110,16 +109,15 @@
 
     //메뉴 수정 (관리자 관점)
     public int update(DB2024TEAM07_Menu menu, int pRes_id, int pMenu_id) {
-        String Q = "UPDATE DB2024_Menu SET menu_id=?, menu_name=?, res_id=?, price=?, menu_comment=? WHERE res_id=? AND menu_id=?";
+        String Q = "UPDATE DB2024_Menu SET menu_id=?, menu_name=?, res_id=?, price=? WHERE res_id=? AND menu_id=?";
         try {
             pStmt = conn.prepareStatement(Q);
             pStmt.setInt(1, menu.getMenu_id());
             pStmt.setString(2, menu.getMenu_name());
             pStmt.setInt(3, menu.getRes_id());
             pStmt.setInt(4, menu.getPrice());
-            pStmt.setString(5, menu.getMenu_comment());
-            pStmt.setInt(6, pRes_id);
-            pStmt.setInt(7, pMenu_id);
+            pStmt.setInt(5, pRes_id);
+            pStmt.setInt(6, pMenu_id);
 
             return pStmt.executeUpdate();
         } catch (SQLException se) {
Index: java/manager/DB2024TEAM07_MenuManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\nDB2024TEAM07_MenuManager.java\n */\n\npackage manager;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Scanner;\n\nimport jdbc.database.DB2024TEAM07_MenuDAO;\nimport jdbc.model.DB2024TEAM07_Menu;\n\npublic class DB2024TEAM07_MenuManager {\n\n    private static DB2024TEAM07_MenuDAO menuDAO = new DB2024TEAM07_MenuDAO();\n\n    /* Add Function */\n    public static void addMenu(Scanner scanner) {\n        System.out.print(\"Enter Menu ID: \");\n        int menu_id = scanner.nextInt();\n        scanner.nextLine();\n\n        System.out.print(\"Enter Menu Name: \");\n        String menu_name = scanner.nextLine();\n\n        System.out.print(\"Enter Restaurant ID: \");\n        int res_id = scanner.nextInt();\n        scanner.nextLine();\n\n        System.out.print(\"Enter Price: \");\n        int price = scanner.nextInt();\n        scanner.nextLine();\n\n        System.out.print(\"Enter Menu Comment: \");\n        String menu_comment = scanner.nextLine();\n\n        DB2024TEAM07_Menu menu = new DB2024TEAM07_Menu(menu_id, menu_name, res_id, price, menu_comment);\n        int result = menuDAO.add(menu);\n\n        if (result > 0) {\n            System.out.println(\"Menu added successfully.\");\n        } else {\n            System.out.println(\"Error adding menu.\");\n        }\n    }\n\n    /* Update Function */\n    public static void updateMenu(Scanner scanner) {\n        System.out.print(\"Enter Restaurant ID: \");\n        int res_id = scanner.nextInt();\n        scanner.nextLine();\n\n        System.out.print(\"Enter Menu ID: \");\n        int menu_id = scanner.nextInt();\n        scanner.nextLine();\n\n        System.out.print(\"Enter New Menu Name: \");\n        String newMenuName = scanner.nextLine();\n\n        System.out.print(\"Enter New Price: \");\n        int newPrice = scanner.nextInt();\n        scanner.nextLine();\n\n        System.out.print(\"Enter New Menu Comment: \");\n        String newMenuComment = scanner.nextLine();\n\n        DB2024TEAM07_Menu updatedMenu = new DB2024TEAM07_Menu(menu_id, newMenuName, res_id, newPrice, newMenuComment);\n        int result = menuDAO.update(updatedMenu, res_id, menu_id);\n\n        if (result > 0) {\n            System.out.println(\"Menu updated successfully.\");\n        } else {\n            System.out.println(\"Error updating menu.\");\n        }\n    }\n\n    /* Search Function */\n    public static void searchMenu(Scanner scanner) {\n        System.out.print(\"Enter Restaurant Name: \");\n        String restaurantName = scanner.nextLine();\n\n        System.out.print(\"Enter Menu Name: \");\n        String menuName = scanner.nextLine();\n\n        System.out.print(\"Enter Minimum Price: \");\n        int minPrice = scanner.nextInt();\n        scanner.nextLine();\n\n        System.out.print(\"Enter Maximum Price: \");\n        int maxPrice = scanner.nextInt();\n        scanner.nextLine();\n\n        try (ResultSet result = menuDAO.searchMenuByRestaurant(restaurantName)) {\n            if (result != null && result.next()) {\n                System.out.println(\"Menu found by search:\");\n                do {\n                    System.out.println(\"Restaurant: \" + restaurantName);\n                    System.out.println(\"Menu Name: \" + result.getString(\"menu_name\"));\n                    System.out.println(\"Price: \" + result.getInt(\"price\"));\n                } while (result.next());\n            } else {\n                System.out.println(\"No menu found matching user search criteria.\");\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /* Delete Function */\n    public static void deleteMenu(Scanner scanner) {\n        System.out.print(\"Enter Restaurant ID: \");\n        int res_id = scanner.nextInt();\n        scanner.nextLine();\n\n        System.out.print(\"Enter Menu ID: \");\n        int menu_id = scanner.nextInt();\n        scanner.nextLine();\n\n        int result = menuDAO.delete(res_id, menu_id);\n\n        if (result > 0) {\n            System.out.println(\"Menu deleted successfully.\");\n        } else {\n            System.out.println(\"Error deleting menu.\");\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/java/manager/DB2024TEAM07_MenuManager.java b/java/manager/DB2024TEAM07_MenuManager.java
--- a/java/manager/DB2024TEAM07_MenuManager.java	(revision 2f77fc7454fe2db47ab2b551df7ce6a98d0d99b7)
+++ b/java/manager/DB2024TEAM07_MenuManager.java	(date 1717176733214)
@@ -1,7 +1,3 @@
-/*
-DB2024TEAM07_MenuManager.java
- */
-
 package manager;
 
 import java.sql.ResultSet;
@@ -32,10 +28,7 @@
         int price = scanner.nextInt();
         scanner.nextLine();
 
-        System.out.print("Enter Menu Comment: ");
-        String menu_comment = scanner.nextLine();
-
-        DB2024TEAM07_Menu menu = new DB2024TEAM07_Menu(menu_id, menu_name, res_id, price, menu_comment);
+        DB2024TEAM07_Menu menu = new DB2024TEAM07_Menu(menu_id, menu_name, res_id, price);
         int result = menuDAO.add(menu);
 
         if (result > 0) {
@@ -62,10 +55,7 @@
         int newPrice = scanner.nextInt();
         scanner.nextLine();
 
-        System.out.print("Enter New Menu Comment: ");
-        String newMenuComment = scanner.nextLine();
-
-        DB2024TEAM07_Menu updatedMenu = new DB2024TEAM07_Menu(menu_id, newMenuName, res_id, newPrice, newMenuComment);
+        DB2024TEAM07_Menu updatedMenu = new DB2024TEAM07_Menu(menu_id, newMenuName, res_id, newPrice);
         int result = menuDAO.update(updatedMenu, res_id, menu_id);
 
         if (result > 0) {
@@ -91,11 +81,11 @@
         int maxPrice = scanner.nextInt();
         scanner.nextLine();
 
-        try (ResultSet result = menuDAO.searchMenuByRestaurant(restaurantName)) {
+        try (ResultSet result = menuDAO.searchByUsers(restaurantName, menuName, minPrice, maxPrice)) {
             if (result != null && result.next()) {
                 System.out.println("Menu found by search:");
                 do {
-                    System.out.println("Restaurant: " + restaurantName);
+                    System.out.println("Restaurant Name: " + result.getString("res_name"));
                     System.out.println("Menu Name: " + result.getString("menu_name"));
                     System.out.println("Price: " + result.getInt("price"));
                 } while (result.next());
@@ -107,6 +97,8 @@
         }
     }
 
+    //searchByRestaurant는 menu_id(해당 식당 내에 있는 메뉴 나열 표시), menu_name, price만 출력되도록 하면 좋을 것 같아용
+
     /* Delete Function */
     public static void deleteMenu(Scanner scanner) {
         System.out.print("Enter Restaurant ID: ");
@@ -125,4 +117,4 @@
             System.out.println("Error deleting menu.");
         }
     }
-}
\ No newline at end of file
+}
Index: java/jdbc/database/DB2024TEAM07_UserDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package jdbc.database;\n//Database 파일의 커넥션과의 연결 필요\n//error라고 적힌 부분은 조치 필요(고민)-롤백/무시/등\n\n/* 구현된 기능:\n    회원가입:   add(DB2024TEAM07_User user)\n    로그인:    sighIn(String user_id, String user_pw)\n    회원정보 수정:    update(DB2024TEAM07_User user, String pUser_id)\n    회원정보 확인:    getUser(String user_id),    getOtherUser(String user_id)\n    회원탈퇴:   delete(String user_id, String user_pw)\n */\n\nimport jdbc.model.DB2024TEAM07_User;\nimport jdbc.view.DB2024TEAM07_UserVO;\n\nimport java.sql.*;\n\npublic class DB2024TEAM07_UserDAO{\n    private Connection conn;\n    private PreparedStatement pStmt;\n    private Statement stmt;\n    private ResultSet rs;\n    public DB2024TEAM07_UserDAO(){\n        this.conn = DB2024TEAM07_Database.getInstance().getConnection();\n    }\n\n    //회원가입 기능(DB2024_User 테이블에 투플 삽입)-----------------------------------------------------------------------\n    public int add(DB2024TEAM07_User user){\n        String Q = \"INSERT INTO DB2024_User VALUES (?, ?, ?, ?, ?, ?)\";\n        try{\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setString(1, user.getUser_id());\n            pStmt.setString(2, user.getUser_pw());\n            pStmt.setString(3, user.getName());\n            pStmt.setInt(4, user.getStudent_id());\n            pStmt.setString(5, user.getEmail());\n            pStmt.setString(6, user.getLocation());\n            return pStmt.executeUpdate();\n        }catch(SQLException se){\n            se.printStackTrace();\n        }\n        return -2;  //error\n    }\n\n    //로그인 기능(DB2024_User 테이블 검색)-----------------------------------------------------------------------\n    public int signIn(String user_id, String user_pw){\n        String Q = \"SELECT user_pw FROM DB2024_User WHERE user_id = ?\";\n        try{\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setString(1, user_id);\n            rs = pStmt.executeQuery();\n            if(rs.next()){\n                if(rs.getString(1).equals(user_pw))\n                    return 1;   //id: 존재 / pw: 일치\n                else\n                    return 0;   //id: 존재 / pw: 불일치\n            }\n            else\n                return -1;      //id: 결과 없음\n        }catch(SQLException se){\n            se.printStackTrace();\n        }\n        return -2;  //error\n    }\n\n    //회원정보 수정(DB2024_User 테이블 검색, 투플값 수정)-----------------------------------------------------------------------\n    //수정하고자 하는 유저의 기존 아이디 전달 필요(두 번째 인자)\n    //수정할 내용을 담은 User 객체와, 수정하기 이전의 user id를 전달받아 수정하는 방식\n    public int update(DB2024TEAM07_User user, String pUser_id){\n        String Q = \"UPDATE DB2024_User SET user_id=?, user_pw=?, name=?, student_id=?, email=?, location=? WHERE user_id=?\";\n        try{\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setString(1, user.getUser_id());\n            pStmt.setString(2, user.getUser_pw());\n            pStmt.setString(3, user.getName());\n            pStmt.setInt(4, user.getStudent_id());\n            pStmt.setString(5, user.getEmail());\n            pStmt.setString(6, user.getLocation());\n            pStmt.setString(7, pUser_id);\n            return pStmt.executeUpdate();\n        }catch(SQLException se){\n            se.printStackTrace();\n        }\n        return -2;  //error\n    }\n\n    //회원정보 확인 기능-----------------------------------------------------------------------\n    //로그인한 유저가 본인의 정보를 확인하는 용도\n    public DB2024TEAM07_User getUser(String user_id){\n        String Q = \"SELECT * FROM DB2024_User WHERE user_id = ?\";\n        try{\n            DB2024TEAM07_User user = new DB2024TEAM07_User();\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setString(1, user_id);\n            rs = pStmt.executeQuery();\n            if(rs.next()){    //id: 존재\n                user.setUser_id(rs.getString(1));\n                user.setUser_pw(rs.getString(2));\n                user.setName(rs.getString(3));\n                user.setStudent_id(rs.getInt(4));\n                user.setEmail(rs.getString(5));\n                user.setLocation(rs.getString(6));\n                return user;\n            }\n            //else\n            //id: 불일치(결과 없음)\n            //아래 리턴문에서 null이 반환됨\n        }catch(SQLException se){\n            se.printStackTrace();\n        }\n        return null;  //error, id 없음\n    }\n\n    //회원정보 확인 기능(2)-----------------------------------------------------------------------\n    //다른 유저의 정보를 확인하는 용도\n    public DB2024TEAM07_UserVO getOtherUser(String user_id){\n        String Q = \"SELECT * FROM DB2024_OtherUser WHERE user_id = ?\";\n        try{\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setString(1, user_id);\n            rs = pStmt.executeQuery();\n            if(rs.next()){    //id: 존재\n                DB2024TEAM07_UserVO user  = new DB2024TEAM07_UserVO(\n                        rs.getString(1),\n                        rs.getString(2),\n                        rs.getString(3)\n                );\n                return user;\n            }\n            //else\n            //id: 불일치(결과 없음)\n            //아래 리턴문에서 null이 반환됨\n        }catch(SQLException se){\n            se.printStackTrace();\n        }\n        return null;  //error, id 없음\n    }\n\n    //탈퇴 기능(DB2024_User 테이블의 투플 삭제)-----------------------------------------------------------------------\n    //유저가 비밀번호를 작성해야 탈퇴할 수 있는 구조로 구현되면 좋다.\n    /*\n        윗단에서 signin을 진행한 다음(유저에게 pw를 받아오기) 그 리턴값을 받아서\n        이 함수 안의 signInRes if문이 작성된 형태로, 조건부로 이 함수가 불리는 편이 더 깔끔할 것 같긴 한데\n        일단은 제가 내부적으로 구현해 두었습니다\n        위쪽 작업하시는 분 이 주석 보시면 그런 방법도 고려해보세용 (현재 방식 그대로 갈 거면 이 주석은 지워주세요~~)\n     */\n    public int delete(String user_id, String user_pw){\n        String Q = \"DELETE FROM DB2024_User WHERE user_id = ?\";\n        try{\n            int signInRes = signIn(user_id, user_pw);\n            if (signInRes == 1){    //id ok pw ok\n                pStmt = conn.prepareStatement(Q);\n                pStmt.setString(1, user_id);\n                rs = pStmt.executeQuery();\n                return pStmt.executeUpdate();\n            }\n            else                  //0: id o pw x, -1: id x, -2: error\n                return signInRes;\n        }catch(SQLException se){\n            se.printStackTrace();\n        }\n        return -2;  //error\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/java/jdbc/database/DB2024TEAM07_UserDAO.java b/java/jdbc/database/DB2024TEAM07_UserDAO.java
--- a/java/jdbc/database/DB2024TEAM07_UserDAO.java	(revision 2f77fc7454fe2db47ab2b551df7ce6a98d0d99b7)
+++ b/java/jdbc/database/DB2024TEAM07_UserDAO.java	(date 1717176649725)
@@ -18,7 +18,6 @@
 public class DB2024TEAM07_UserDAO{
     private Connection conn;
     private PreparedStatement pStmt;
-    private Statement stmt;
     private ResultSet rs;
     public DB2024TEAM07_UserDAO(){
         this.conn = DB2024TEAM07_Database.getInstance().getConnection();
Index: DBISFREE.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n    <exclude-output />\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/java\" isTestSource=\"false\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n    <orderEntry type=\"library\" name=\"mysql-connector-j-8.4\" level=\"project\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DBISFREE.iml b/DBISFREE.iml
--- a/DBISFREE.iml	(revision 2f77fc7454fe2db47ab2b551df7ce6a98d0d99b7)
+++ b/DBISFREE.iml	(date 1717176649724)
@@ -8,5 +8,6 @@
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" name="mysql-connector-j-8.4" level="project" />
+    <orderEntry type="library" name="mysql-connector-java-8.0.23" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: ../sql/create.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>-- 기존에 존재하는 테이블 삭제 -----------------------------------------------------------------------\nDROP DATABASE IF EXISTS  DB2024TEAM07;\n\n-- 데이터베이스 생성 -----------------------------------------------------------------------\nCREATE DATABASE DB2024TEAM07 CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nUSE DB2024TEAM07;\n\n-- 테이블 생성 -----------------------------------------------------------------------\n-- 1. DB2024_User: 유저 정보에 관한 테이블\nCREATE TABLE DB2024_User(\n-- 유저 아이디, 비밀번호, 이름, 학번, 이메일, 장소 속성\n    user_id VARCHAR(50),\n    user_pw VARCHAR(50) NOT NULL,\n    name VARCHAR(50) NOT NULL,\n-- 학번, 이메일, 장소는 필수로 작성하지 않아도 되게끔 설정되었다.\n    student_id INT,\n    email VARCHAR(50) CHECK (email LIKE '%@%'),\n-- 주의: Restaurant 테이블의 location 속성과 이름만 같고 다른 의미 가짐\n    location VARCHAR(100),\n\n-- 유일한 값을 가지는 유저 아이디가 각각의 투플을 구분한다.\n-- > 회원가입 과정(유저 테이블에 투플 삽입)에서 아이디 중복 체크 필수\n    PRIMARY KEY (user_id)\n);\n\n-- 2. DB2024_Restaurant: 식당 정보에 관한 테이블\nCREATE TABLE DB2024_Restaurant(\n  res_name VARCHAR(200) NOT NULL,\n  res_id INT NOT NULL AUTO_INCREMENT,\n  phone_num VARCHAR(20) DEFAULT NULL,\n  address VARCHAR(200) DEFAULT NULL,\n  operating_hours VARCHAR(100) DEFAULT NULL,\n  break_time VARCHAR(100) DEFAULT NULL,\n  rating decimal(2,1) DEFAULT NULL,\n  cuisine_type VARCHAR(50) DEFAULT NULL,\n  location VARCHAR(50) DEFAULT NULL,\n\n  PRIMARY KEY(res_id)\n);\n\n-- 3. DB2024_Menu: DB2024_Restaurant 테이블의 식당 메뉴 테이블\n-- 레스토랑 -> 메뉴 -> 리뷰가 제3정규형으로 변환된 것\nCREATE TABLE DB2024_Menu(\n-- 메뉴 id, 메뉴 이름, 식당 이름, 메뉴 가격, 메뉴 설명 속성\n    menu_id INT,\n    menu_name VARCHAR(50),\n    res_id INT,\n    price INT,\n\n-- 특정 식당의 특정 메뉴라는 점이 각각의 투플을 구별한다\n    PRIMARY KEY(menu_id, res_id),\n-- 참조하고 있던 식당이 사라지면 메뉴들도 전부 사라지는 정책 선택\n    FOREIGN KEY(res_id) REFERENCES DB2024_Restaurant(res_id) ON DELETE CASCADE\n);\n\n-- 4. DB2024_Review: DB2024_Menu 테이블의 메뉴에 대한 리뷰 테이블\n-- 레스토랑 -> 메뉴 -> 리뷰가 제3정규형으로 변환된 것\nCREATE TABLE DB2024_Review (\n   review_id INT AUTO_INCREMENT,\n   user_id VARCHAR(50) NOT NULL,\n   menu_id INT,\n-- 0, 1, 2, 3, 4, 5점만 입력할 수 있게 설정\n   rating INT NOT NULL CHECK(rating>-1 AND rating<6),\n   review_content VARCHAR(500),\n\n   PRIMARY KEY (review_id),\n   FOREIGN KEY (user_id) REFERENCES DB2024_User(user_id),\n   FOREIGN KEY (menu_id) REFERENCES DB2024_Menu(menu_id) ON DELETE SET NULL\n);\n\n-- 5. DB2024_Rating: DB2024_Restaurant과 DB2024_Review간의 관계*를 mapping한 테이블\n-- *: DB2024_Review 테이블에서의 GROUP BY(resid) AVG(rating) 값 -> DB2024_Restaurant의 rating 값\n-- DB2024_Review 테이블에 투플이 삽입될 때마다 DB2024_Rating 테이블에도 투플을 삽입하는 연산 필수\nCREATE TABLE DB2024_Rating (\n   review_id INT,\n   res_id INT NOT NULL,\n   rating INT,\n\n-- 유일한 값을 가지는 리뷰 아이디가 각각의 투플을 구별한다\n   PRIMARY KEY (review_id),\n-- 이 테이블의 투플은 이 테이블이 참조하는 '리뷰', '식당'이 사라질 때 같이 삭제된다.\n   FOREIGN KEY(review_id) REFERENCES DB2024_Review(review_id) ON DELETE CASCADE,\n   FOREIGN KEY(rating) REFERENCES DB2024_Review(review_id),\n   FOREIGN KEY(res_id) REFERENCES DB2024_Restaurant(res_id) ON DELETE CASCADE\n);\n\n-- 릴레이션 확인 -----------------------------------------------------------------------\n-- 제대로 생겼는지 확인 용도.\n/*\nSHOW TABLES;\nDESCRIBE DB2024_User;\nDESCRIBE DB2024_Restaurant;\nDESCRIBE DB2024_Menu;\nDESCRIBE DB2024_Review;\nDESCRIBE DB2024_Rating;\n*/\n\n-- 데이터 삽입 --------------------------------------------------------------------------\n-- 평점이 없는 식당은 NULL 값 저장 -----------------------------------------------------------\nINSERT INTO DB2024_Restaurant VALUES\n      ('모미지식당', 1, '070-4154-2000', '서울 서대문구 이화여대7길 24 2층', '월~금 11:00~20:30, 토 11:30~20:30', '월~토 15:00~17:00', '4', '일식', '정문'),\n      ('낭만식탁', 2, '02-312-1238', '서울 서대문구 이화여대5길 6 1층', '월~토 11:00~20:00', '월~토 15:00~17:00', NULL, '일식', '정문'),\n      ('원즈오운', 3, '02-313-3190', '서울특별시 서대문구 이화여대길 20 1층', '월~토 10:00~21:00', NULL, '3', '베이커리', '정문'),\n      ('심플리스트', 4, '010-2583-3190', '서울 서대문구 이화여대길 24 2층', '월~토 11:30~21:30', '월~토 15:00~17:00', '4', '양식', '정문'),\n      ('초식곳간', 5, '02-365-5679', '서울 서대문구 이화여대2가길 19 1층', '월~금 11:00~19:30', NULL, '4', '샐러드', '정문'),\n      ('유아케도쿄', 6, '02-6401-7991', '서울 서대문구 이화여대3길 28 101호', '월~토 11:00~21:00', NULL, '3', '일식', '정문'),\n      ('우미마루', 7, NULL, '서울특별시 서대문구 신촌역로 18 1층', '월~일 11:00~21:00', '월~일 15:00~17:00', '3', '일식', '정문'),\n      ('아콘스톨', 8, '02-364-1301', '서울특별시 서대문구 신촌역로 17 1층 110호', '월~금, 일 11:00~21:00', NULL, '5', '도시락', '정문'),\n      ('진돈부리', 9, '010-4726-7604', '서울 서대문구 신촌로 149 신촌 자이엘라 B104', '월~토 17:00~20:20', NULL, NULL, '일식', '정문'),\n      ('어바웃샤브', 10, '02-6402-4949', '서울 서대문구 이화여대8길 2 201호', NULL, NULL, '4', '샤브샤브', '정문'),\n      ('소오밥집', 11, '02-6397-8917', '서울 서대문구 이화여대길 50-10 1층', '월~토, 일 10:30~20:00', '월~토, 일 15:00~17:00', '3', '일식', '정문'),\n      ('까이식당', 12, '070-7779-8899', '서울 서대문구 이화여대2가길 24 1층', '월~금 11:00~20:00', '월~금 15:00~17:00', '4', '아시안', '정문'),\n      ('아민 이화', 13, '02-363-0113', '서울 서대문구 이화여대길 52-31 1층', '월~일 11:00~21:00', NULL, '4', '양식', '정문'),\n      ('유소바', 14, '070-8224-7956', '서울 서대문구 이화여대2길 4 1층', '월~일 11:30~21:30', '월~일 15:00~17:00', '2', '일식', '정문'),\n      ('포히엔베트남쌀국수 이대점', 15, '02-365-1985', '서울 서대문구 이화여대3길 2 1층', '월~일 11:00~21:00', NULL, '4', '아시안', '정문'),\n      ('마더락 신촌점', 16, '02-365-1757', '서울특별시 서대문구 이화여대3길 29 101호', '월~일 9:00~18:00', NULL, '2', '도시락', '정문'),\n      ('티아라 파스타', 17, '0507-1413-4268', '서울 서대문구 이화여대7길 24 2층', '월~금 10:30~20:00', NULL, '4', '양식', '정문'),\n      ('스탠바이키친', 18, '02-365-6353', '서울 서대문구 연대동문길 49 1층 101호', '월~금 10:30~20:00', '월~금 15:00~16:00', '4', '양식', '후문'),\n      ('이로운 밥상', 19, '02-365-1245', '서울 서대문구 연대동문길 27-6 2층', '월~토 11:00~21:00', '월~토 15:00~17:00', '3', '한식', '후문'),\n      ('화가와요리사 이대후문점', 20, '02-364-1970', '서울 서대문구 성산로 539', '월~금 11:00~20:00, 토 11:00~14:00', NULL, '3', '일식', '후문'),\n      ('헐리우드', 21, '02-723-4888', '서울 서대문구 성산로 551 1층', '월~일 10:00~21:00', NULL, '3', '양식', '후문'),\n      ('식탁 하늬솔점', 22, '02-362-0777', '서울 서대문구 성산로 527 하늬솔빌딩', '월~일 11:00~20:00', NULL, '1', '양식', '후문'),\n      ('불밥', 23, '02-362-9833', '서울 서대문구 이화여대8길 11 2층', '월~토 11:00~22:00', '월~토 15:00~16:30', '3', '한식', '정문'),\n      ('수라 이대점', 24, '02-392-9333', '서울 서대문구 이화여대2가길 20 1층', '월~금 11:00~21:00', NULL, '3', '한식', '정문'),\n      ('의원상', 25, NULL, '서울 서대문구 이화여대길 72-5 1층', '월,화,목,금,토,일 10:30~21:30', NULL, '3', '중식', '정문'),\n      ('화라라마라탕', 26, '02-313-0158', '서울 서대문구 이화여대길 76 1층', '월~일 10:00~22:00', NULL, '3', '중식', '정문'),\n      ('마더린더베이글', 27, '070-7758-3030', '서울 서대문구 이화여대5길 5 지상 1층', '월~금 8:30~16:30, 토 10:00~16:30', '', NULL, '베이커리', '정문'),\n      ('이화성', 28, '02-393-8511', '서울 서대문구 이화여대길 50-8 지하 1층', '화~일 10:30~20:00', NULL, '2', '중식', '정문'),\n      ('청년밥상문간 이화여자대학교점', 29, '0507-1344-6031', '서울 서대문구 이화여대길 52-39 지하 1층', '월~금 11:00~20:00', '월~금 16:00~17:00', '4', '한식', '정문'),\n      ('등촌샤브칼국수 신촌점', 30, '0507-1398-7850', '서울 서대문구 신촌역로 43 1층', '월~일 11:00~22:00', '월~일 15:00~17:00', '5', '샤브샤브', '정문'),\n      ('슬로우캘리 이대점', 31, '0507-1391-7188', '서울 서대문구 이화여대길 78 가동 1층', '월~일 11:00~21:00', '월~일 15:00~17:00', NULL, '샐러드', '정문');\n\nINSERT INTO DB2024_User VALUES\n\t('s2eojeong', 's2eojeong', '조서정', 2276305, 's2eojeong@gmail.com', '후문'),\n    ('astralfinance', 'astralfinance', '한사랑', 2271064, 'astralfinance@', '후문'),\n    ('cannes7', 'cannes7', '고은서', 2122004, 'cannes7@ewhain.net', '정문'),\n    ('meanwest', 'meanwest', '김민서', 2276046, 'meanwestk@gmail.com', '후문'),\n    ('chacha091', 'chacha091', '차현주', 2276321, 'chacha09@ewhain.net', '정문');\n    \nINSERT INTO DB2024_Menu VALUES\n\t(1, '육회덮밥', 1, 11000),\n\t(2, '소고기 가지덮밥', 1, 15000),\n\t(1, '사케동', 2, 14000),\n\t(2, '간장새우계란밥', 2, 12000),\n\t(1, '잠봉뵈르', 3, 11000),\n\t(2, '허머스 라페 치아바타', 3, 9000),\n\t(3, '스모크드 베이컨 할리피뇨 바게트', 3, 11000),\n\t(1, '전복 관자 파스타', 4, 23000),\n\t(2, '홍새우 파스타', 4, 23000),\n\t(3, '흑돼지 핑크안심', 4, 17000),\n\t(4, 'E.C.C 샐러드', 4, 16000),\n\t(1, '(스페인에서 온 올리브) 감바스새우', 5, 9400),\n\t(2, '(노르웨이 불곰도 반한) 생연어', 5, 9900),\n\t(3, '리코타치즈 샌드', 5, 7500),\n\t(1, '등심돈까스', 6, 9500),\n\t(2, '안심돈까스', 6, 11000),\n\t(3, '치즈돈까스', 6, 11000),\n\t(1, '붓가게', 7, 7000),\n\t(2, '기츠네', 7, 7500),\n\t(3, '가케', 7, 6500),\n\t(1, '아콘스톨김밥', 8, 3000),\n\t(2, '순대떡볶음', 8, 3900),\n\t(1, '사케동', 9, 15000),\n\t(2, '아부리사케동', 9, 15000),\n\t(1, '삼겹 샤브세트', 10, 12000),\n\t(2, '버섯 샤브세트', 10, 12000),\n\t(1, '제육덮밥', 11, 8500),\n\t(2, '가라아게동', 11, 9000),\n\t(3, '가츠동', 11, 9000),\n\t(1, '치킨라이스 보통', 12, 10000),\n\t(2, '치킨라이스 특', 12, 14000),\n\t(1, '모로코 잘룩 플레이트', 13, 25000),\n\t(2, '터키 츨브르 플레이트', 13, 23000),\n\t(1, '우삼겹정식', 14, 16000),\n\t(2, '마구로정식', 14, 16000),\n\t(1, '후띠우 쌀국수', 15, 9000),\n\t(2, '분짜', 15, 10000),\n\t(1, '떡갈비 도시락', 16, 12000),\n\t(2, '소불고기 도시락', 16, 15000),\n\t(1, '매콤명란크림파스타', 17, 9500),\n\t(2, '알리오올리오', 17, 8500),\n\t(1, '베트남치킨반미', 18, 7300),\n\t(2, '베이컨 치즈 오믈렛', 18, 7800),\n\t(1, '연잎밥 정식', 19, 18000),\n\t(2, '곤드레밥 정식', 19, 16000),\n\t(1, '청년찌개', 20, 8000),\n\t(2, '궁극의베이컨볶음밥', 20, 8500),\n\t(1, '파마산치킨파스타', 21, 12000),\n\t(2, '토마토 해산물 파스타', 21, 12000),\n\t(1, '베이징 가지덮밥', 22, 13500),\n\t(2, '쉬림프 크림 파스타', 22, 16500),\n\t(1, '불돼지', 23, 10000),\n\t(2, '불오징어', 23, 12000),\n\t(1, '불고기정식', 24, 12000),\n\t(2, '둘깨미역국', 24, 9500),\n\t(1, '러우지아모', 25, 4000),\n\t(2, '비법량피', 25, 6000),\n\t(3, '쏸라펀', 25, 7000),\n\t(1, '꿔바로우', 26, 12900),\n\t(2, '마라탕', 26, 7000),\n\t(3, '마라샹궈', 26, 15000),\n\t(1, '훈제연어 샌드위치', 27, 8900),\n\t(2, '낫소', 27, 2800),\n\t(1, '짜장면', 28, 5500),\n\t(2, '짬뽕', 28, 6500),\n\t(1, '김치찌개', 29, 3000),\n\t(2, '라면사리', 29, 1000),\n\t(3, '고기추가', 29, 2000),\n\t(4, '어묵사리', 29, 1000),\n\t(1, '얼큰 버섯 칼국수', 30, 10000),\n\t(2, '맑은 버섯 칼국수', 30, 10000),\n\t(3, '샤브소고기', 30, 10000),\n\t(1, '스파이스 연어 포케', 31, 12500),\n\t(2, '클래식 참치 포케', 31, 11500),\n\t(3, '부채살 스테이크 보울', 31, 13500);\n    \n-- 뷰 생성 -----------------------------------------------------------------------\n/*\n-- 카테고리 테이블(뷰로 대체)\nCREATE TABLE DB2024_Category(\ncuisine_type VARCHAR(50),\n    PRIMARY KEY (cuisine_type)\n);\n*/\n-- restaurant dao의 구성 상 꼭 필요할 지 의문이 들기는 하다\n-- > 식당 페이지에 처음 접속했을 땐 상단에 cuisine_type 별로 버튼을 만들고 그 아래에 식당 리스트가 쫙 있고\n--  cuisine_type 버튼을 누르면 type 별로 식당 리스트가 바뀌는걸로 해도 좋을 것 같아요.\n-- 메인 페이지에서 보여주는 용도로 사용해도 괜찮을듯(예: 배민)\n/* pStmt로  사용하거나, 아님 다른 방식으로 사용하거나 해야할 것 같아요\nCREATE VIEW DB2024_Category AS\n\t(SELECT res_id, res_name\n\tFROM DB2024_Restaurant\n\tWHERE cuisine_type=?);\n*/\n\n-- 보안용 유저정보 확인 뷰(다른 유저의 이름과 이메일만 확인 가능)\nCREATE VIEW DB2024_OtherUser AS\n(SELECT user_id, `name`, email\nFROM DB2024_User);\n-- SELECT * FROM DB2024_OtherUser;\n\n-- 리뷰를 유저이름, 메뉴이름, 평점, 리뷰내용의 형태로 보기 위한 뷰\nCREATE VIEW DB2024_viewReview AS\nSELECT review_id, DB2024_User.name, DB2024_Menu.menu_name, rating, review_content\nFROM DB2024_User, DB2024_Menu, DB2024_Review\nWHERE DB2024_User.user_id = DB2024_Review.user_id AND DB2024_Menu.menu_id = DB2024_Review.menu_id;\n-- SELECT * FROM DB2024_viewReview;\n\nCREATE VIEW DB2024_MenuView AS\nSELECT r.res_name, m.menu_name, m.price\nFROM DB2024_Restaurant r JOIN DB2024_Menu m ON r.res_id = m.res_id;\n-- SELECT * FROM DB2024_MenuView;\n\n-- 인덱스 생성 -----------------------------------------------------------------------\n-- DB2024_Rating.res_id: 특정 가게의 평점 평을 구할 때 DB2024_Rating 테이블의 res_id가 자주 사용됨\nCREATE INDEX DB2024_idx_AvgRating\n    ON DB2024_Rating (res_id);\n\n-- DB2024_Review.user_id: 특정 유저의 리뷰를 몰아볼 때 DB2024_Review 테이블의 user_id가 자주 사용됨\nCREATE INDEX DB2024_idx_Review\n    ON DB2024_Review (user_id);\n\n-- DB2024_Menu.res_id: Restaurant별로 menu 검색\nCREATE INDEX DB2024_idx_Menu\n    ON DB2024_Menu(res_id);\n    \n-- DB2024_Restaurant.cuisine_type: cuisine_type별로 Restaurant를 검색\nCREATE INDEX DB2024_idx_Restaurant\n    ON DB2024_Restaurant(cuisine_type);\n\n\n-- 테이블 삭제 (맨 윗줄 코드로 대체) -----------------------------------------------------------------------\n-- DROP DATABASE DB2024TEAM07;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../sql/create.sql b/../sql/create.sql
--- a/../sql/create.sql	(revision 2f77fc7454fe2db47ab2b551df7ce6a98d0d99b7)
+++ b/../sql/create.sql	(date 1717176649723)
@@ -6,16 +6,22 @@
 USE DB2024TEAM07;
 
 -- 테이블 생성 -----------------------------------------------------------------------
--- 1. DB2024_User: 유저 정보에 관한 테이블
+/*
+ 1. DB2024_User: 유저 정보에 관한 테이블
+ user_id: PK, 유저 아이디 정보
+ user_pw: 유저 비밀번호 정보
+ name: 유저 이름(닉네임) 정보
+ student_id: 유저 학번 정보
+ email: 유저 이메일 정보
+ location: 유저 장소 정보(주의! Restaurant 테이블의 location 속성과 이름만 같고 다른 의미 가짐)
+ */
 CREATE TABLE DB2024_User(
 -- 유저 아이디, 비밀번호, 이름, 학번, 이메일, 장소 속성
     user_id VARCHAR(50),
     user_pw VARCHAR(50) NOT NULL,
     name VARCHAR(50) NOT NULL,
--- 학번, 이메일, 장소는 필수로 작성하지 않아도 되게끔 설정되었다.
     student_id INT,
     email VARCHAR(50) CHECK (email LIKE '%@%'),
--- 주의: Restaurant 테이블의 location 속성과 이름만 같고 다른 의미 가짐
     location VARCHAR(100),
 
 -- 유일한 값을 가지는 유저 아이디가 각각의 투플을 구분한다.
@@ -23,22 +29,40 @@
     PRIMARY KEY (user_id)
 );
 
--- 2. DB2024_Restaurant: 식당 정보에 관한 테이블
+/*
+ 2. DB2024_Restaurant: 식당 정보에 관한 테이블
+     res_name: 식당 이름 정보
+     res_id: PK. 투플이 추가될 때마다 자동적으로 1씩 추가되어 입력된다.
+     phone_num: 식당 전화번호 정보
+     address: 식당 주소 정보
+     operating_hours: 식당 운영시간 정보
+     break_time: 식당 휴식시간 정보
+     rating: 식당 전체(평균) 평점
+     cuisine_type: 식당 요리 종류 정보
+     location: 식당 장소 정보
+ */
 CREATE TABLE DB2024_Restaurant(
-  res_name VARCHAR(200) NOT NULL,
-  res_id INT NOT NULL AUTO_INCREMENT,
-  phone_num VARCHAR(20) DEFAULT NULL,
-  address VARCHAR(200) DEFAULT NULL,
-  operating_hours VARCHAR(100) DEFAULT NULL,
-  break_time VARCHAR(100) DEFAULT NULL,
-  rating decimal(2,1) DEFAULT NULL,
-  cuisine_type VARCHAR(50) DEFAULT NULL,
-  location VARCHAR(50) DEFAULT NULL,
+    res_name VARCHAR(200) NOT NULL,
+    res_id INT NOT NULL AUTO_INCREMENT,
+    phone_num VARCHAR(20) DEFAULT NULL,
+    address VARCHAR(200) DEFAULT NULL,
+    operating_hours VARCHAR(100) DEFAULT NULL,
+    break_time VARCHAR(100) DEFAULT NULL,
+    rating decimal(2,1) DEFAULT NULL,
+    cuisine_type VARCHAR(50) DEFAULT NULL,
+    location VARCHAR(50) DEFAULT NULL,
 
-  PRIMARY KEY(res_id)
+    PRIMARY KEY(res_id)
 );
 
--- 3. DB2024_Menu: DB2024_Restaurant 테이블의 식당 메뉴 테이블
+/*
+ 3. DB2024_Menu: DB2024_Restaurant 테이블의 식당* 메뉴 테이블
+    menu_id: 각각의 메뉴 투플을 구별하는 식별자
+    menu_name: 메뉴의 이름 정보값. 50자까지 작성이 가능하다.
+    res_id: DB2024_Restaurant 테이블의 PK를 FK로 받아옴
+    price: 메뉴의 가격 정보값. INT 타입의 입력만 가능하다.
+ */
+-- *: Menu는 약한 개체 타입으로, Restaurant에 의존한다. (DB2024_Menu PK: menu_id, res_id)
 -- 레스토랑 -> 메뉴 -> 리뷰가 제3정규형으로 변환된 것
 CREATE TABLE DB2024_Menu(
 -- 메뉴 id, 메뉴 이름, 식당 이름, 메뉴 가격, 메뉴 설명 속성
@@ -53,13 +77,20 @@
     FOREIGN KEY(res_id) REFERENCES DB2024_Restaurant(res_id) ON DELETE CASCADE
 );
 
--- 4. DB2024_Review: DB2024_Menu 테이블의 메뉴에 대한 리뷰 테이블
+/*
+ 4. DB2024_Review: DB2024_User 테이블의 유저가* DB2024_Menu 테이블의 메뉴**에 대해 작성한 리뷰 테이블
+    review_id: 각각의 리뷰 투플을 구별하는 PK
+    user_id: 해당 리뷰를 작성한 유저 정보를 가지는 FK (DB2024_User의 PK)
+    menu_id: 해당 리뷰가 대상으로 하는 메뉴 정보를 가지는 FK (DB2024_Menu의 PK)
+    rating: 리뷰 점수. INT type으로, 0, 1, 2, 3, 4, 5값만을 작성할 수 있다.
+    review_content: 리뷰 텍스트. 500자까지 작성이 가능하다.
+ */
+-- *, **: 이진 1:N 관계
 -- 레스토랑 -> 메뉴 -> 리뷰가 제3정규형으로 변환된 것
 CREATE TABLE DB2024_Review (
    review_id INT AUTO_INCREMENT,
    user_id VARCHAR(50) NOT NULL,
    menu_id INT,
--- 0, 1, 2, 3, 4, 5점만 입력할 수 있게 설정
    rating INT NOT NULL CHECK(rating>-1 AND rating<6),
    review_content VARCHAR(500),
 
@@ -68,24 +99,26 @@
    FOREIGN KEY (menu_id) REFERENCES DB2024_Menu(menu_id) ON DELETE SET NULL
 );
 
--- 5. DB2024_Rating: DB2024_Restaurant과 DB2024_Review간의 관계*를 mapping한 테이블
--- *: DB2024_Review 테이블에서의 GROUP BY(resid) AVG(rating) 값 -> DB2024_Restaurant의 rating 값
+/*
+ 5. DB2024_Rating: DB2024_Restaurant과 DB2024_Review간의 관계*를 mapping한 테이블
+    review_id: DB2024_Review 테이블의 PK를 FK로 받아옴
+    res_id: DB2024_Restaurant 테이블의 PK를 FK로 받아옴
+ */
+-- *: 이진 N:M 관계, DB2024_Review 테이블에서의 GROUP BY(resid) AVG(rating) 값 -> DB2024_Restaurant의 rating 값
 -- DB2024_Review 테이블에 투플이 삽입될 때마다 DB2024_Rating 테이블에도 투플을 삽입하는 연산 필수
 CREATE TABLE DB2024_Rating (
    review_id INT,
    res_id INT NOT NULL,
-   rating INT,
+   -- rating INT,
 
--- 유일한 값을 가지는 리뷰 아이디가 각각의 투플을 구별한다
-   PRIMARY KEY (review_id),
+   PRIMARY KEY (review_id, res_id),
 -- 이 테이블의 투플은 이 테이블이 참조하는 '리뷰', '식당'이 사라질 때 같이 삭제된다.
    FOREIGN KEY(review_id) REFERENCES DB2024_Review(review_id) ON DELETE CASCADE,
-   FOREIGN KEY(rating) REFERENCES DB2024_Review(review_id),
+   -- FOREIGN KEY(rating) REFERENCES DB2024_Review(review_id),
    FOREIGN KEY(res_id) REFERENCES DB2024_Restaurant(res_id) ON DELETE CASCADE
 );
 
 -- 릴레이션 확인 -----------------------------------------------------------------------
--- 제대로 생겼는지 확인 용도.
 /*
 SHOW TABLES;
 DESCRIBE DB2024_User;
Index: java/jdbc/model/DB2024TEAM07_Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package jdbc.model;\n\npublic class DB2024TEAM07_Menu{\n    int menu_id;\n    String menu_name;\n    int res_id;\n    int price;\n    String menu_comment;\n\n    //생성자\n    public DB2024TEAM07_Menu(int menu_id, String menu_name, int res_id, int price, String menu_comment) {\n        this.menu_id = menu_id;\n        this.menu_name = menu_name;\n        this.res_id = res_id;\n        this.price = price;\n        this.menu_comment = menu_comment;\n    }\n\n    //getter,setter\n    public int getMenu_id() {\n        return menu_id;\n    }\n\n    public void setMenu_id(int menu_id) {\n        this.menu_id = menu_id;\n    }\n\n    public String getMenu_name() {\n        return menu_name;\n    }\n\n    public void setMenu_name(String menu_name) {\n        this.menu_name = menu_name;\n    }\n\n    public int getRes_id() {\n        return res_id;\n    }\n\n    public void setRes_id(int res_id) {\n        this.res_id = res_id;\n    }\n\n    public int getPrice() {\n        return price;\n    }\n\n    public void setPrice(int price) {\n        this.price = price;\n    }\n\n    public String getMenu_comment() {\n        return menu_comment;\n    }\n\n    public void setMenu_comment(String menu_comment) {\n        this.menu_comment = menu_comment;\n    }\n\n    //toString 메소드 오버라이딩. 원하는 형식으로 출력.\n    @java.lang.Override\n    public java.lang.String toString() {\n        return \"Menu{\" +\n                \"menu_id=\" + menu_id +\n                \", menu_name='\" + menu_name + '\\'' +\n                \", res_id=\" + res_id +\n                \", price=\" + price +\n                \", menu_comment='\" + menu_comment + '\\'' +\n                '}';\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/java/jdbc/model/DB2024TEAM07_Menu.java b/java/jdbc/model/DB2024TEAM07_Menu.java
--- a/java/jdbc/model/DB2024TEAM07_Menu.java	(revision 2f77fc7454fe2db47ab2b551df7ce6a98d0d99b7)
+++ b/java/jdbc/model/DB2024TEAM07_Menu.java	(date 1717176649725)
@@ -5,15 +5,13 @@
     String menu_name;
     int res_id;
     int price;
-    String menu_comment;
 
     //생성자
-    public DB2024TEAM07_Menu(int menu_id, String menu_name, int res_id, int price, String menu_comment) {
+    public DB2024TEAM07_Menu(int menu_id, String menu_name, int res_id, int price) {
         this.menu_id = menu_id;
         this.menu_name = menu_name;
         this.res_id = res_id;
         this.price = price;
-        this.menu_comment = menu_comment;
     }
 
     //getter,setter
@@ -49,23 +47,16 @@
         this.price = price;
     }
 
-    public String getMenu_comment() {
-        return menu_comment;
-    }
-
-    public void setMenu_comment(String menu_comment) {
-        this.menu_comment = menu_comment;
-    }
 
     //toString 메소드 오버라이딩. 원하는 형식으로 출력.
-    @java.lang.Override
-    public java.lang.String toString() {
-        return "Menu{" +
+
+    @Override
+    public String toString() {
+        return "DB2024TEAM07_Menu{" +
                 "menu_id=" + menu_id +
                 ", menu_name='" + menu_name + '\'' +
                 ", res_id=" + res_id +
                 ", price=" + price +
-                ", menu_comment='" + menu_comment + '\'' +
                 '}';
     }
 }
\ No newline at end of file
