Index: java/jdbc/view/DB2024TEAM07_CategoryVO.java
===================================================================
diff --git a/java/jdbc/view/DB2024TEAM07_CategoryVO.java b/java/jdbc/view/DB2024TEAM07_CategoryVO.java
deleted file mode 100644
--- a/java/jdbc/view/DB2024TEAM07_CategoryVO.java	(revision 969156975bedeea400b423d66a0107ffef57a7de)
+++ /dev/null	(revision 969156975bedeea400b423d66a0107ffef57a7de)
@@ -1,23 +0,0 @@
-package jdbc.view;
-
-// category 뷰
-
-public class DB2024TEAM07_CategoryVO {
-    private String cuisine_type;
-    private String res_name;
-
-    // 생성자
-    public DB2024TEAM07_CategoryVO(String cuisine_type, String res_name) {
-        this.cuisine_type = cuisine_type;
-        this.res_name = res_name;
-    }
-
-    // getter
-    public String getCuisine_type() {
-        return cuisine_type;
-    }
-
-    public String getRes_name() {
-        return res_name;
-    }
-}
\ No newline at end of file
Index: java/jdbc/database/DB2024TEAM07_RestaurantDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package jdbc.database;\n\nimport jdbc.model.DB2024TEAM07_Restaurant;\nimport jdbc.view.DB2024TEAM07_CategoryVO;\n\nimport java.sql.*;\nimport java.util.*;\n\n// 구현해야할 기능: 식당 등록(관리자), 식당 조회(유저), 식당 정보 업데이트(관리자), 식당 삭제(관리자)\n// 생각해볼것: location으로 검색할건지 cuisine_type으로 검색할건지 식당 이름으로 검색할건지 --> 복합적인 검색조건으로 식당 조회하는 기능\n\npublic class DB2024TEAM07_RestaurantDAO {\n    private Connection conn;\n    private PreparedStatement pStmt;\n    private ResultSet rs;\n\n    public DB2024TEAM07_RestaurantDAO() {\n        this.conn = DB2024TEAM07_Database.getInstance().getConnection();\n    }\n\n    //식당 등록 (관리자 관점) ---- DB2024_Restaurant에 투플 삽입------\n    public int add(DB2024TEAM07_Restaurant restaurant) {\n        String Q = \"INSERT INTO DB2024_Restaurant (res_name, res_id, phone_num, address, operating_hours, break_time, rating, cuisine_type, location) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n        try {\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setString(1, restaurant.getRes_name());\n            pStmt.setInt(2, restaurant.getRes_id());\n            pStmt.setString(3, restaurant.getPhone_num());\n            pStmt.setString(4, restaurant.getAddress());\n            pStmt.setString(5, restaurant.getOperating_hours());\n            pStmt.setString(6, restaurant.getBreak_time());\n            pStmt.setFloat(7, restaurant.getRating());\n            pStmt.setString(8, restaurant.getCuisine_type());\n            pStmt.setString(9, restaurant.getLocation());\n\n            return pStmt.executeUpdate();\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        return 0;\n    }\n\n    // 식당 검색 -복합적인 조건\n    // res_name, rating(0.5 단위 별로 3.0을 입력하면 3.0점 이상인 식당), cuisine_type, location 4가지 조건을 복합적으로 검색\n    // rating의 경우 사용자가 입력한 평점 이상인 식당들 검색\n    public List<DB2024TEAM07_Restaurant> search(String res_name, String cuisine_type, String location, Float rating) {\n\n        StringBuilder Q = new StringBuilder(\"SELECT * FROM DB2024_Restaurant WHERE 1=1\");\n        List<Object> params = new ArrayList<>();\n\n        if (res_name != null && !res_name.isEmpty()) {\n            Q.append(\" AND res_name LIKE ?\");\n            params.add(\"%\" + res_name + \"%\");\n        }\n        if (cuisine_type != null && !cuisine_type.isEmpty()) {\n            Q.append(\" AND cuisine_type LIKE ?\");\n            params.add(\"%\" + cuisine_type + \"%\");\n        }\n        if (location != null && !location.isEmpty()) {\n            Q.append(\" AND location LIKE ?\");\n            params.add(\"%\" + location + \"%\");\n        }\n        if (rating != null) {\n            Q.append(\" AND rating >= ?\");\n            params.add(rating);\n        }\n\n        List<DB2024TEAM07_Restaurant> restaurants = new ArrayList<>();\n        try {\n            PreparedStatement pStmt = conn.prepareStatement(Q.toString());\n\n            for (int i = 0; i < params.size(); i++) {\n                pStmt.setObject(i + 1, params.get(i));\n            }\n            ResultSet rs = pStmt.executeQuery();\n\n            while (rs.next()) {\n                DB2024TEAM07_Restaurant restaurant = new DB2024TEAM07_Restaurant(\n                        rs.getString(\"res_name\"),\n                        rs.getInt(\"res_id\"),\n                        rs.getString(\"phone_num\"),\n                        rs.getString(\"address\"),\n                        rs.getString(\"operating_hours\"),\n                        rs.getString(\"break_time\"),\n                        rs.getFloat(\"rating\"),\n                        rs.getString(\"cuisine_type\"),\n                        rs.getString(\"location\")\n                );\n                restaurants.add(restaurant);\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return restaurants;\n    }\n\n    public DB2024TEAM07_CategoryVO searchByCategory(String cuisine_type) {\n        String Q = \"SELECT * FROM DB2024_Category WHERE cuisine_type = ?\";\n        try {\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setString(1, cuisine_type);\n            rs = pStmt.executeQuery();\n\n            if (rs.next()) {\n                DB2024TEAM07_CategoryVO category = new DB2024TEAM07_CategoryVO(\n                        rs.getString(\"cuisine_type\"),\n                        rs.getString(\"res_name\")\n                );\n                return category;\n            }\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        return null;\n    }\n\n    //식당 수정 (관리자 관점)\n    public int update(DB2024TEAM07_Restaurant restaurant, int pRes_id) {\n        String Q = \"UPDATE DB2024_Restaurant SET res_name=?, phone_num=?, address=?, operating_hours=?, break_time=?, rating=?, cuisine_type=?, location=? WHERE res_id=?\";\n        try {\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setString(1, restaurant.getRes_name());\n            pStmt.setString(2, restaurant.getPhone_num());\n            pStmt.setString(3, restaurant.getAddress());\n            pStmt.setString(4, restaurant.getOperating_hours());\n            pStmt.setString(5, restaurant.getBreak_time());\n            pStmt.setFloat(6, restaurant.getRating());\n            pStmt.setString(7, restaurant.getCuisine_type());\n            pStmt.setString(8, restaurant.getLocation());\n            pStmt.setInt(9, pRes_id);\n\n            return pStmt.executeUpdate();\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        return 0;\n    }\n\n    //식당 삭제 (관리자 관점)\n    public int delete(int res_id) {\n        String Q = \"DELETE FROM DB2024_Restaurant WHERE res_id=?\";\n        try {\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setInt(1, res_id);\n\n            // executeQuery()는 결과를 반환하지 않아서 executeUpdate()로 수정\n            return pStmt.executeUpdate();\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        return 0;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/java/jdbc/database/DB2024TEAM07_RestaurantDAO.java b/java/jdbc/database/DB2024TEAM07_RestaurantDAO.java
--- a/java/jdbc/database/DB2024TEAM07_RestaurantDAO.java	(revision 969156975bedeea400b423d66a0107ffef57a7de)
+++ b/java/jdbc/database/DB2024TEAM07_RestaurantDAO.java	(date 1717086882314)
@@ -1,7 +1,6 @@
 package jdbc.database;
 
 import jdbc.model.DB2024TEAM07_Restaurant;
-import jdbc.view.DB2024TEAM07_CategoryVO;
 
 import java.sql.*;
 import java.util.*;
@@ -88,26 +87,21 @@
                 );
                 restaurants.add(restaurant);
             }
-        } catch (SQLException e) {
-            e.printStackTrace();
+        } catch (SQLException se) {
+            se.printStackTrace();
         }
         return restaurants;
     }
 
-    public DB2024TEAM07_CategoryVO searchByCategory(String cuisine_type) {
-        String Q = "SELECT * FROM DB2024_Category WHERE cuisine_type = ?";
+    // 식당 검색 - cuisine_type 별로
+    public ResultSet searchRestaurantByCategory(String cuisine_type) {
+        ResultSet rs = null;
+        String Q = "SELECT res_name, phone_num, address, operating_hours, break_time, rating, location " +
+                "FROM DB2024_Restaurant USE INDEX(DB2024_idx_Restaurant) WHERE cuisine_type = ?";
         try {
             pStmt = conn.prepareStatement(Q);
             pStmt.setString(1, cuisine_type);
-            rs = pStmt.executeQuery();
-
-            if (rs.next()) {
-                DB2024TEAM07_CategoryVO category = new DB2024TEAM07_CategoryVO(
-                        rs.getString("cuisine_type"),
-                        rs.getString("res_name")
-                );
-                return category;
-            }
+            return pStmt.executeQuery();
         } catch (SQLException se) {
             se.printStackTrace();
         }
@@ -143,12 +137,11 @@
             pStmt = conn.prepareStatement(Q);
             pStmt.setInt(1, res_id);
 
-            // executeQuery()는 결과를 반환하지 않아서 executeUpdate()로 수정
             return pStmt.executeUpdate();
+
         } catch (SQLException se) {
             se.printStackTrace();
         }
         return 0;
     }
-
 }
Index: java/jdbc/database/DB2024TEAM07_MenuDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package jdbc.database;\n\nimport jdbc.model.DB2024TEAM07_Menu;\n\nimport java.sql.*;\nimport java.util.*;\n\n//구현해야할 기능: 메뉴 등록, 메뉴 조회, 메뉴 수정, 메뉴 삭제\n//건의할거: menu 테이블에 menu_id 추가? 한 식당 내에 메뉴 여러개라 메뉴 id 속성도 추가하면 좋을거같음.\npublic class DB2024TEAM07_MenuDAO{\n    private Connection conn;\n    private PreparedStatement pStmt;\n    private ResultSet rs;\n\n    public DB2024TEAM07_MenuDAO(){\n        this.conn = DB2024TEAM07_Database.getInstance().getConnection();\n    }\n\n    //메뉴 등록 (관리자 관점)\n    public int add(DB2024TEAM07_Menu menu) {\n        String Q = \"INSERT INTO DB2024_Menu (menu_id, menu_name, res_id, price, menu_comment) VALUES (?, ?, ?, ?, ?)\";\n        try {\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setInt(1, menu.getMenu_id());\n            pStmt.setString(2, menu.getMenu_name());\n            pStmt.setInt(3, menu.getRes_id());\n            pStmt.setInt(4, menu.getPrice());\n            pStmt.setString(5, menu.getMenu_comment());\n\n            return pStmt.executeUpdate();\n\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        return 0;\n    }\n\n    //    메뉴 조회 1 (사용자 관점)\n    //    minPrice 와 maxPrice 사이의 가격에 해당하는 메뉴들 조회\n    //    사용자 입장에서 어떤 식당에 있는 메뉴들을 검색할 땐 res_name으로 검색하지 res_id로 검색하지 않기 때문에 Menu 테이블과 Restaurant 테이블을 조인해서 res_name 받아옴.\n    //    사용자에게 필요한 정보(res_name, menu_name, price, menu_comment 만 보여주기\n    public ResultSet searchByUsers(String res_name, String menu_name, Integer minPrice, Integer maxPrice) {\n        StringBuilder Q = new StringBuilder( // DB2024_MenuView 뷰 활용.\n                \"SELECT res_name, menu_name, price, menu_comment FROM DB2024_MenuView WHERE 1=1\"\n        );\n\n        List<Object> params = new ArrayList<>();\n\n        if (res_name != null && !res_name.isEmpty()) {\n            Q.append(\" AND res_name LIKE ?\");\n            params.add(\"%\" + res_name + \"%\");\n        }\n\n        if (menu_name != null && !menu_name.isEmpty()) {\n            Q.append(\" AND menu_name LIKE ?\");\n            params.add(\"%\" + menu_name + \"%\");\n        }\n\n        if (minPrice != null) {\n            Q.append(\" AND price >= ?\");\n            params.add(minPrice);\n        }\n\n        if (maxPrice != null) {\n            Q.append(\" AND price <= ?\");\n            params.add(maxPrice);\n        }\n\n        try {\n            pStmt = conn.prepareStatement(Q.toString());\n\n            for (int i = 0; i < params.size(); i++) {\n                pStmt.setObject(i + 1, params.get(i));\n            }\n            return pStmt.executeQuery();\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        return null;\n    }\n\n    // 메뉴 조회 2 (관리자 관점 - res_id로 검색해도 괜찮은 주체)\n    public ResultSet searchByManager(int res_id) {\n        String Q = \"SELECT * FROM DB2024_Menu WHERE res_id=?\";\n        try {\n            pStmt = conn.prepareStatement(Q);\n            pStmt.setInt(1, res_id);\n\n            return pStmt.executeQuery();\n        } catch (SQLException se) {\n            se.printStackTrace();\n        }\n        return null;\n    }\n\n    //메뉴 수정 (관리자 관점)\n        public int update(DB2024TEAM07_Menu menu, int pRes_id, int pMenu_id) {\n            String Q = \"UPDATE DB2024_Menu SET menu_id=?, menu_name=?, res_id=?, price=?, menu_comment=? WHERE res_id=? AND menu_id=?\";\n            try {\n                pStmt = conn.prepareStatement(Q);\n                pStmt.setInt(1, menu.getMenu_id());\n                pStmt.setString(2, menu.getMenu_name());\n                pStmt.setInt(3, menu.getRes_id());\n                pStmt.setInt(4, menu.getPrice());\n                pStmt.setString(5, menu.getMenu_comment());\n                pStmt.setInt(6, pRes_id);\n                pStmt.setInt(7, pMenu_id);\n\n                return pStmt.executeUpdate();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n            return 0;\n        }\n\n    //메뉴 삭제 (관리자 관점)\n        public int delete(int res_id, int menu_id) {\n            String Q = \"DELETE FROM DB2024_Menu WHERE res_id=? AND menu_id=?\";\n            try {\n                pStmt = conn.prepareStatement(Q);\n                pStmt.setInt(1, res_id);\n                pStmt.setInt(2, menu_id);\n\n                return pStmt.executeUpdate();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n            return 0;\n        }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/java/jdbc/database/DB2024TEAM07_MenuDAO.java b/java/jdbc/database/DB2024TEAM07_MenuDAO.java
--- a/java/jdbc/database/DB2024TEAM07_MenuDAO.java	(revision 969156975bedeea400b423d66a0107ffef57a7de)
+++ b/java/jdbc/database/DB2024TEAM07_MenuDAO.java	(date 1717086882313)
@@ -2,11 +2,13 @@
 
 import jdbc.model.DB2024TEAM07_Menu;
 
-import java.sql.*;
-import java.util.*;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.List;
 
-//구현해야할 기능: 메뉴 등록, 메뉴 조회, 메뉴 수정, 메뉴 삭제
-//건의할거: menu 테이블에 menu_id 추가? 한 식당 내에 메뉴 여러개라 메뉴 id 속성도 추가하면 좋을거같음.
 public class DB2024TEAM07_MenuDAO{
     private Connection conn;
     private PreparedStatement pStmt;
@@ -78,6 +80,19 @@
         }
         return null;
     }
+
+    // 메뉴 조회 - 식당별로 메뉴 검색
+    public ResultSet searchMenuByRestaurant(String res_id) {
+        String Q = "SELECT menu_id, menu_name, price FROM DB2024_Menu use index(DB2024_idx_Menu) WHERE res_id = ?";
+        try {
+            pStmt = conn.prepareStatement(Q);
+            pStmt.setString(1, res_id);
+            return pStmt.executeQuery();
+        } catch (SQLException se) {
+            se.printStackTrace();
+        }
+        return null;
+    }
 
     // 메뉴 조회 2 (관리자 관점 - res_id로 검색해도 괜찮은 주체)
     public ResultSet searchByManager(int res_id) {
@@ -94,37 +109,37 @@
     }
 
     //메뉴 수정 (관리자 관점)
-        public int update(DB2024TEAM07_Menu menu, int pRes_id, int pMenu_id) {
-            String Q = "UPDATE DB2024_Menu SET menu_id=?, menu_name=?, res_id=?, price=?, menu_comment=? WHERE res_id=? AND menu_id=?";
-            try {
-                pStmt = conn.prepareStatement(Q);
-                pStmt.setInt(1, menu.getMenu_id());
-                pStmt.setString(2, menu.getMenu_name());
-                pStmt.setInt(3, menu.getRes_id());
-                pStmt.setInt(4, menu.getPrice());
-                pStmt.setString(5, menu.getMenu_comment());
-                pStmt.setInt(6, pRes_id);
-                pStmt.setInt(7, pMenu_id);
+    public int update(DB2024TEAM07_Menu menu, int pRes_id, int pMenu_id) {
+        String Q = "UPDATE DB2024_Menu SET menu_id=?, menu_name=?, res_id=?, price=?, menu_comment=? WHERE res_id=? AND menu_id=?";
+        try {
+            pStmt = conn.prepareStatement(Q);
+            pStmt.setInt(1, menu.getMenu_id());
+            pStmt.setString(2, menu.getMenu_name());
+            pStmt.setInt(3, menu.getRes_id());
+            pStmt.setInt(4, menu.getPrice());
+            pStmt.setString(5, menu.getMenu_comment());
+            pStmt.setInt(6, pRes_id);
+            pStmt.setInt(7, pMenu_id);
 
-                return pStmt.executeUpdate();
-            } catch (SQLException e) {
-                e.printStackTrace();
-            }
-            return 0;
-        }
+            return pStmt.executeUpdate();
+        } catch (SQLException se) {
+            se.printStackTrace();
+        }
+        return 0;
+    }
 
     //메뉴 삭제 (관리자 관점)
-        public int delete(int res_id, int menu_id) {
-            String Q = "DELETE FROM DB2024_Menu WHERE res_id=? AND menu_id=?";
-            try {
-                pStmt = conn.prepareStatement(Q);
-                pStmt.setInt(1, res_id);
-                pStmt.setInt(2, menu_id);
+    public int delete(int res_id, int menu_id) {
+        String Q = "DELETE FROM DB2024_Menu WHERE res_id=? AND menu_id=?";
+        try {
+            pStmt = conn.prepareStatement(Q);
+            pStmt.setInt(1, res_id);
+            pStmt.setInt(2, menu_id);
 
-                return pStmt.executeUpdate();
-            } catch (SQLException e) {
-                e.printStackTrace();
-            }
-            return 0;
-        }
+            return pStmt.executeUpdate();
+        } catch (SQLException se) {
+            se.printStackTrace();
+        }
+        return 0;
+    }
 }
\ No newline at end of file
Index: java/jdbc/view/DB2024TEAM07_MenuVO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/java/jdbc/view/DB2024TEAM07_MenuVO.java b/java/jdbc/view/DB2024TEAM07_MenuVO.java
new file mode 100644
--- /dev/null	(date 1717086882314)
+++ b/java/jdbc/view/DB2024TEAM07_MenuVO.java	(date 1717086882314)
@@ -0,0 +1,41 @@
+package jdbc.view;
+
+public class DB2024TEAM07_MenuVO {
+    private String res_name;
+    private String menu_name;
+    private int price;
+
+    public DB2024TEAM07_MenuVO(String res_name, String menu_name, int price) {
+        this.res_name = res_name;
+        this.menu_name = menu_name;
+        this.price = price;
+    }
+
+    public DB2024TEAM07_MenuVO() {
+
+    }
+
+    public String getRes_name() {
+        return res_name;
+    }
+
+    public void setRes_name(String res_name) {
+        this.res_name = res_name;
+    }
+
+    public String getMenu_name() {
+        return menu_name;
+    }
+
+    public void setMenu_name(String menu_name) {
+        this.menu_name = menu_name;
+    }
+
+    public int getPrice() {
+        return price;
+    }
+
+    public void setPrice(int price) {
+        this.price = price;
+    }
+}
Index: ../sql/create.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>-- 기존에 존재하는 테이블 삭제 -----------------------------------------------------------------------\nDROP DATABASE IF EXISTS  DB2024TEAM07;\n\n-- 데이터베이스 생성 -----------------------------------------------------------------------\nCREATE DATABASE DB2024TEAM07 CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nUSE DB2024TEAM07;\n\n-- 테이블 생성 -----------------------------------------------------------------------\n-- 1. DB2024_User: 유저 정보에 관한 테이블\nCREATE TABLE DB2024_User(\n-- 유저 아이디, 비밀번호, 이름, 학번, 이메일, 장소 속성\n    user_id VARCHAR(50),\n    user_pw VARCHAR(50) NOT NULL,\n    name VARCHAR(50) NOT NULL,\n-- 학번, 이메일, 장소는 필수로 작성하지 않아도 되게끔 설정되었다.\n    student_id INT,\n    email VARCHAR(50) CHECK (email LIKE '%@%'),\n-- 주의: Restaurant 테이블의 location 속성과 이름만 같고 다른 의미 가짐\n    location VARCHAR(100),\n\n-- 유일한 값을 가지는 유저 아이디가 각각의 투플을 구분한다.\n-- > 회원가입 과정(유저 테이블에 투플 삽입)에서 아이디 중복 체크 필수\n    PRIMARY KEY (user_id)\n);\n\n-- 2. DB2024_Restaurant: 식당 정보에 관한 테이블\nCREATE TABLE DB2024_Restaurant(\n  res_name VARCHAR(200) NOT NULL,\n  res_id INT NOT NULL AUTO_INCREMENT,\n  phone_num VARCHAR(20) DEFAULT NULL,\n  address VARCHAR(200) DEFAULT NULL,\n  operating_hours VARCHAR(100) DEFAULT NULL,\n  break_time VARCHAR(100) DEFAULT NULL,\n  rating decimal(2,1) DEFAULT NULL,\n  cuisine_type VARCHAR(50) DEFAULT NULL,\n  location VARCHAR(50) DEFAULT NULL,\n\n  PRIMARY KEY(res_id)\n);\n\n-- 3. DB2024_Menu: DB2024_Restaurant 테이블의 식당 메뉴 테이블\n-- 레스토랑 -> 메뉴 -> 리뷰가 제3정규형으로 변환된 것\nCREATE TABLE DB2024_Menu(\n-- 메뉴 id, 메뉴 이름, 식당 이름, 메뉴 가격, 메뉴 설명 속성\n    menu_id INT,\n    menu_name VARCHAR(50),\n    res_id INT,\n    price INT,\n    menu_comment VARCHAR(100),\n\n-- 특정 식당의 특정 메뉴라는 점이 각각의 투플을 구별한다\n    PRIMARY KEY(menu_id, res_id),\n-- 참조하고 있던 식당이 사라지면 메뉴들도 전부 사라지는 정책 선택\n    FOREIGN KEY(res_id) REFERENCES DB2024_Restaurant(res_id) ON DELETE CASCADE\n);\n\n-- 4. DB2024_Review: DB2024_Menu 테이블의 메뉴에 대한 리뷰 테이블\n-- 레스토랑 -> 메뉴 -> 리뷰가 제3정규형으로 변환된 것\nCREATE TABLE DB2024_Review (\n   review_id INT AUTO_INCREMENT,\n   user_id VARCHAR(50) NOT NULL,\n   menu_id INT,\n-- 0, 1, 2, 3, 4, 5점만 입력할 수 있게 설정\n   rating INT NOT NULL CHECK(rating>-1 AND rating<6),\n   review_content VARCHAR(500),\n\n   PRIMARY KEY (review_id),\n   FOREIGN KEY (user_id) REFERENCES DB2024_User(user_id),\n   FOREIGN KEY (menu_id) REFERENCES DB2024_Menu(menu_id) ON DELETE SET NULL\n);\n\n-- 5. DB2024_Rating: DB2024_Restaurant과 DB2024_Review간의 관계*를 mapping한 테이블\n-- *: DB2024_Review 테이블에서의 GROUP BY(resid) AVG(rating) 값 -> DB2024_Restaurant의 rating 값\n-- DB2024_Review 테이블에 투플이 삽입될 때마다 DB2024_Rating 테이블에도 투플을 삽입하는 연산 필수\nCREATE TABLE DB2024_Rating (\n   review_id INT,\n   res_id INT NOT NULL,\n   rating INT,\n\n-- 유일한 값을 가지는 리뷰 아이디가 각각의 투플을 구별한다\n   PRIMARY KEY (review_id),\n-- 이 테이블의 투플은 이 테이블이 참조하는 '리뷰', '식당'이 사라질 때 같이 삭제된다.\n   FOREIGN KEY(review_id) REFERENCES DB2024_Review(review_id) ON DELETE CASCADE,\n   FOREIGN KEY(rating) REFERENCES DB2024_Review(review_id),\n   FOREIGN KEY(res_id) REFERENCES DB2024_Restaurant(res_id) ON DELETE CASCADE\n);\n\n-- 릴레이션 확인 -----------------------------------------------------------------------\n-- 제대로 생겼는지 확인 용도.\n/*\nSHOW TABLES;\nDESCRIBE DB2024_User;\nDESCRIBE DB2024_Restaurant;\nDESCRIBE DB2024_Menu;\nDESCRIBE DB2024_Review;\nDESCRIBE DB2024_Rating;\n*/\n\n-- 데이터 삽입 --------------------------------------------------------------------------\n-- 평점이 없는 식당은 NULL 값 저장 -----------------------------------------------------------\nINSERT INTO DB2024_Restaurant VALUES\n      ('모미지식당', 1, '070-4154-2000', '서울 서대문구 이화여대7길 24 2층', '월~금 11:00~20:30, 토 11:30~20:30', '월~토 15:00~17:00', '4', '일식', '정문'),\n      ('낭만식탁', 2, '02-312-1238', '서울 서대문구 이화여대5길 6 1층', '월~토 11:00~20:00', '월~토 15:00~17:00', NULL, '일식', '정문'),\n      ('원즈오운', 3, '02-313-3190', '서울특별시 서대문구 이화여대길 20 1층', '월~토 10:00~21:00', NULL, '3', '베이커리', '정문'),\n      ('심플리스트', 4, '010-2583-3190', '서울 서대문구 이화여대길 24 2층', '월~토 11:30~21:30', '월~토 15:00~17:00', '4', '양식', '정문'),\n      ('초식곳간', 5, '02-365-5679', '서울 서대문구 이화여대2가길 19 1층', '월~금 11:00~19:30', NULL, '4', '샐러드', '정문'),\n      ('유아케도쿄', 6, '02-6401-7991', '서울 서대문구 이화여대3길 28 101호', '월~토 11:00~21:00', NULL, '3', '일식', '정문'),\n      ('우미마루', 7, NULL, '서울특별시 서대문구 신촌역로 18 1층', '월~일 11:00~21:00', '월~일 15:00~17:00', '3', '일식', '정문'),\n      ('아콘스톨', 8, '02-364-1301', '서울특별시 서대문구 신촌역로 17 1층 110호', '월~금, 일 11:00~21:00', NULL, '5', '도시락', '정문'),\n      ('진돈부리', 9, '010-4726-7604', '서울 서대문구 신촌로 149 신촌 자이엘라 B104', '월~토 17:00~20:20', NULL, NULL, '일식', '정문'),\n      ('어바웃샤브', 10, '02-6402-4949', '서울 서대문구 이화여대8길 2 201호', NULL, NULL, '4', '샤브샤브', '정문'),\n      ('소오밥집', 11, '02-6397-8917', '서울 서대문구 이화여대길 50-10 1층', '월~토, 일 10:30~20:00', '월~토, 일 15:00~17:00', '3', '일식', '정문'),\n      ('까이식당', 12, '070-7779-8899', '서울 서대문구 이화여대2가길 24 1층', '월~금 11:00~20:00', '월~금 15:00~17:00', '4', '아시안', '정문'),\n      ('아민 이화', 13, '02-363-0113', '서울 서대문구 이화여대길 52-31 1층', '월~일 11:00~21:00', NULL, '4', '양식', '정문'),\n      ('유소바', 14, '070-8224-7956', '서울 서대문구 이화여대2길 4 1층', '월~일 11:30~21:30', '월~일 15:00~17:00', '2', '일식', '정문'),\n      ('포히엔베트남쌀국수 이대점', 15, '02-365-1985', '서울 서대문구 이화여대3길 2 1층', '월~일 11:00~21:00', NULL, '4', '아시안', '정문'),\n      ('마더락 신촌점', 16, '02-365-1757', '서울특별시 서대문구 이화여대3길 29 101호', '월~일 9:00~18:00', NULL, '2', '도시락', '정문'),\n      ('티아라 파스타', 17, '0507-1413-4268', '서울 서대문구 이화여대7길 24 2층', '월~금 10:30~20:00', NULL, '4', '양식', '정문'),\n      ('스탠바이키친', 18, '02-365-6353', '서울 서대문구 연대동문길 49 1층 101호', '월~금 10:30~20:00', '월~금 15:00~16:00', '4', '양식', '후문'),\n      ('이로운 밥상', 19, '02-365-1245', '서울 서대문구 연대동문길 27-6 2층', '월~토 11:00~21:00', '월~토 15:00~17:00', '3', '한식', '후문'),\n      ('화가와요리사 이대후문점', 20, '02-364-1970', '서울 서대문구 성산로 539', '월~금 11:00~20:00, 토 11:00~14:00', NULL, '3', '일식', '후문'),\n      ('헐리우드', 21, '02-723-4888', '서울 서대문구 성산로 551 1층', '월~일 10:00~21:00', NULL, '3', '양식', '후문'),\n      ('식탁 하늬솔점', 22, '02-362-0777', '서울 서대문구 성산로 527 하늬솔빌딩', '월~일 11:00~20:00', NULL, '1', '양식', '후문'),\n      ('불밥', 23, '02-362-9833', '서울 서대문구 이화여대8길 11 2층', '월~토 11:00~22:00', '월~토 15:00~16:30', '3', '한식', '정문'),\n      ('수라 이대점', 24, '02-392-9333', '서울 서대문구 이화여대2가길 20 1층', '월~금 11:00~21:00', NULL, '3', '한식', '정문'),\n      ('의원상', 25, NULL, '서울 서대문구 이화여대길 72-5 1층', '월,화,목,금,토,일 10:30~21:30', NULL, '3', '중식', '정문'),\n      ('화라라마라탕', 26, '02-313-0158', '서울 서대문구 이화여대길 76 1층', '월~일 10:00~22:00', NULL, '3', '중식', '정문'),\n      ('마더린더베이글', 27, '070-7758-3030', '서울 서대문구 이화여대5길 5 지상 1층', '월~금 8:30~16:30, 토 10:00~16:30', '', NULL, '베이커리', '정문'),\n      ('이화성', 28, '02-393-8511', '서울 서대문구 이화여대길 50-8 지하 1층', '화~일 10:30~20:00', NULL, '2', '중식', '정문'),\n      ('청년밥상문간 이화여자대학교점', 29, '0507-1344-6031', '서울 서대문구 이화여대길 52-39 지하 1층', '월~금 11:00~20:00', '월~금 16:00~17:00', '4', '한식', '정문'),\n      ('등촌샤브칼국수 신촌점', 30, '0507-1398-7850', '서울 서대문구 신촌역로 43 1층', '월~일 11:00~22:00', '월~일 15:00~17:00', '5', '샤브샤브', '정문'),\n      ('슬로우캘리 이대점', 31, '0507-1391-7188', '서울 서대문구 이화여대길 78 가동 1층', '월~일 11:00~21:00', '월~일 15:00~17:00', NULL, '샐러드', '정문');\n\nINSERT INTO DB2024_User VALUES\n\t(\"s2eojeong\", \"s2eojeong\", \"조서정\", 2276305, \"s2eojeong@gmail.com\", \"후문\"),\n    (\"astralfinance\", \"astralfinance\", \"한사랑\", 2271064, \"astralfinance\", \"후문\"),\n    (\"cannes7\", \"cannes7\", \"고은서\", 2122004, \"cannes7@ewhain.net\", \"정문\"),\n    (\"meanwest\", \"meanwest\", \"김민서\", 2276046, \"meanwestk@gmail.com\", \"후문\"),\n    (\"chacha091\", \"chacha091\", \"차현주\", 2276321, \"chacha09@ewhain.net\", \"정문\");\n    \nINSERT INTO DB2024_Menu VALUES\n\t(1, '육회덮밥', 1, 11000),\n\t(2, '소고기 가지덮밥', 1, 15000),\n\t(1, '사케동', 2, 14000),\n\t(2, '간장새우계란밥', 2, 12000),\n\t(1, '잠봉뵈르', 3, 11000),\n\t(2, '허머스 라페 치아바타', 3, 9000),\n\t(3, '스모크드 베이컨 할리피뇨 바게트', 3, 11000),\n\t(1, '전복 관자 파스타', 4, 23000),\n\t(2, '홍새우 파스타', 4, 23000),\n\t(3, '흑돼지 핑크안심', 4, 17000),\n\t(4, 'E.C.C 샐러드', 4, 16000),\n\t(1, '(스페인에서 온 올리브) 감바스새우', 5, 9400),\n\t(2, '(노르웨이 불곰도 반한) 생연어', 5, 9900),\n\t(3, '리코타치즈 샌드', 5, 7500),\n\t(1, '등심돈까스', 6, 9500),\n\t(2, '안심돈까스', 6, 11000),\n\t(3, '치즈돈까스', 6, 11000),\n\t(1, '붓가게', 7, 7000),\n\t(2, '기츠네', 7, 7500),\n\t(3, '가케', 7, 6500),\n\t(1, '아콘스톨김밥', 8, 3000),\n\t(2, '순대떡볶음', 8, 3900),\n\t(1, '사케동', 9, 15000),\n\t(2, '아부리사케동', 9, 15000),\n\t(1, '삼겹 샤브세트', 10, 12000),\n\t(2, '버섯 샤브세트', 10, 12000),\n\t(1, '제육덮밥', 11, 8500),\n\t(2, '가라아게동', 11, 9000),\n\t(3, '가츠동', 11, 9000),\n\t(1, '치킨라이스 보통', 12, 10000),\n\t(2, '치킨라이스 특', 12, 14000),\n\t(1, '모로코 잘룩 플레이트', 13, 25000),\n\t(2, '터키 츨브르 플레이트', 13, 23000),\n\t(1, '우삼겹정식', 14, 16000),\n\t(2, '마구로정식', 14, 16000),\n\t(1, '후띠우 쌀국수', 15, 9000),\n\t(2, '분짜', 15, 10000),\n\t(1, '떡갈비 도시락', 16, 12000),\n\t(2, '소불고기 도시락', 16, 15000),\n\t(1, '매콤명란크림파스타', 17, 9500),\n\t(2, '알리오올리오', 17, 8500),\n\t(1, '베트남치킨반미', 18, 7300),\n\t(2, '베이컨 치즈 오믈렛', 18, 7800),\n\t(1, '연잎밥 정식', 19, 18000),\n\t(2, '곤드레밥 정식', 19, 16000),\n\t(1, '청년찌개', 20, 8000),\n\t(2, '궁극의베이컨볶음밥', 20, 8500),\n\t(1, '파마산치킨파스타', 21, 12000),\n\t(2, '토마토 해산물 파스타', 21, 12000),\n\t(1, '베이징 가지덮밥', 22, 13500),\n\t(2, '쉬림프 크림 파스타', 22, 16500),\n\t(1, '불돼지', 23, 10000),\n\t(2, '불오징어', 23, 12000),\n\t(1, '불고기정식', 24, 12000),\n\t(2, '둘깨미역국', 24, 9500),\n\t(1, '러우지아모', 25, 4000),\n\t(2, '비법량피', 25, 6000),\n\t(3, '쏸라펀', 25, 7000),\n\t(1, '꿔바로우', 26, 12900),\n\t(2, '마라탕', 26, 7000),\n\t(3, '마라샹궈', 26, 15000),\n\t(1, '훈제연어 샌드위치', 27, 8900),\n\t(2, '낫소', 27, 2800),\n\t(1, '짜장면', 28, 5500),\n\t(2, '짬뽕', 28, 6500),\n\t(1, '김치찌개', 29, 3000),\n\t(2, '라면사리', 29, 1000),\n\t(3, '고기추가', 29, 2000),\n\t(4, '어묵사리', 29, 1000),\n\t(1, '얼큰 버섯 칼국수', 30, 10000),\n\t(2, '맑은 버섯 칼국수', 30, 10000),\n\t(3, '샤브소고기', 30, 10000),\n\t(1, '스파이스 연어 포케', 31, 12500),\n\t(2, '클래식 참치 포케', 31, 11500),\n\t(3, '부채살 스테이크 보울', 31, 13500);\n    \n-- 뷰 생성 -----------------------------------------------------------------------\n/*\n-- 카테고리 테이블(뷰로 대체)\nCREATE TABLE DB2024_Category(\ncuisine_type VARCHAR(50),\n    PRIMARY KEY (cuisine_type)\n);\n*/\n-- restaurant dao의 구성 상 꼭 필요할 지 의문이 들기는 하다\n-- > 식당 페이지에 처음 접속했을 땐 상단에 cuisine_type 별로 버튼을 만들고 그 아래에 식당 리스트가 쫙 있고\n--  cuisine_type 버튼을 누르면 type 별로 식당 리스트가 바뀌는걸로 해도 좋을 것 같아요.\n-- 메인 페이지에서 보여주는 용도로 사용해도 괜찮을듯(예: 배민)\n/* pStmt로  사용하거나, 아님 다른 방식으로 사용하거나 해야할 것 같아요\nCREATE VIEW DB2024_Category AS\n\t(SELECT res_id, res_name\n\tFROM DB2024_Restaurant\n\tWHERE cuisine_type=?);\n*/\n\n-- 보안용 유저정보 확인 뷰(다른 유저의 이름과 이메일만 확인 가능)\nCREATE VIEW DB2024_OtherUser AS\n(SELECT user_id, `name`, email\nFROM DB2024_User);\n-- SELECT * FROM DB2024_OtherUser;\n\n-- 사용자가 한 삭당 안에 있는 메뉴들을 검색할 때 res_name 을 이용하므로 DB2024_Restaurant 와 DB2024_Menu 의 조인을 통해 res_name 을 받아와야함.\nCREATE VIEW DB2024_MenuView AS\n(SELECT r.res_name, m.menu_name, m.price, m.menu_comment\nFROM DB2024_Menu m JOIN DB2024_Restaurant r\n                        ON m.res_id = r.res_id);\n-- SELECT * FROM DB2024_MenuView;\n\n-- 인덱스 생성 -----------------------------------------------------------------------\n-- DB2024_Rating.res_id: 특정 가게의 평점 평균을 구할 때 DB2024_Rating 테이블의 res_id가 자주 사용됨\nCREATE INDEX DB2024_idx_AvgRating\n    ON DB2024_Rating (res_id);\n\n-- DB2024_Review.user_id: 특정 유저의 리뷰를 몰아볼 때 DB2024_Review 테이블의 user_id가 자주 사용됨\nCREATE INDEX DB2024_idx_Review\n    ON DB2024_Review (user_id);\n\n-- DB2024_Menu.res_id: Restaurant별로 메뉴를 검색\nCREATE INDEX DB2024_idx_Menu\n    ON DB2024_Menu(res_id);\n\n-- DB2024_Restaurant.cuisine_type: cuisine_type별로 Restaurant를 검색\nCREATE INDEX DB2024_idx_Restaurant\n    ON DB2024_Restaurant(cuisine_type);\n\n\n-- 테이블 삭제 (맨 윗줄 코드로 대체) -----------------------------------------------------------------------\n-- DROP DATABASE DB2024TEAM07;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../sql/create.sql b/../sql/create.sql
--- a/../sql/create.sql	(revision 969156975bedeea400b423d66a0107ffef57a7de)
+++ b/../sql/create.sql	(date 1717086882313)
@@ -46,7 +46,6 @@
     menu_name VARCHAR(50),
     res_id INT,
     price INT,
-    menu_comment VARCHAR(100),
 
 -- 특정 식당의 특정 메뉴라는 점이 각각의 투플을 구별한다
     PRIMARY KEY(menu_id, res_id),
@@ -240,15 +239,13 @@
 FROM DB2024_User);
 -- SELECT * FROM DB2024_OtherUser;
 
--- 사용자가 한 삭당 안에 있는 메뉴들을 검색할 때 res_name 을 이용하므로 DB2024_Restaurant 와 DB2024_Menu 의 조인을 통해 res_name 을 받아와야함.
 CREATE VIEW DB2024_MenuView AS
-(SELECT r.res_name, m.menu_name, m.price, m.menu_comment
-FROM DB2024_Menu m JOIN DB2024_Restaurant r
-                        ON m.res_id = r.res_id);
+SELECT r.res_name, m.menu_name, m.price
+FROM DB2024_Restaurant r JOIN DB2024_Menu m ON r.res_id = m.res_id;
 -- SELECT * FROM DB2024_MenuView;
 
 -- 인덱스 생성 -----------------------------------------------------------------------
--- DB2024_Rating.res_id: 특정 가게의 평점 평균을 구할 때 DB2024_Rating 테이블의 res_id가 자주 사용됨
+-- DB2024_Rating.res_id: 특정 가게의 평점 평을 구할 때 DB2024_Rating 테이블의 res_id가 자주 사용됨
 CREATE INDEX DB2024_idx_AvgRating
     ON DB2024_Rating (res_id);
 
@@ -256,10 +253,10 @@
 CREATE INDEX DB2024_idx_Review
     ON DB2024_Review (user_id);
 
--- DB2024_Menu.res_id: Restaurant별로 메뉴를 검색
+-- DB2024_Menu.res_id: Restaurant별로 menu 검색
 CREATE INDEX DB2024_idx_Menu
     ON DB2024_Menu(res_id);
-
+    
 -- DB2024_Restaurant.cuisine_type: cuisine_type별로 Restaurant를 검색
 CREATE INDEX DB2024_idx_Restaurant
     ON DB2024_Restaurant(cuisine_type);
